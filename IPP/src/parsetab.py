
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'ASSIGN CLASS COLON COMMENT DOT FALSE IDENTIFIER INTEGER LBRACE LBRACKET LPAREN NIL PIPE RBRACE RBRACKET RPAREN STRING TRUEprogram : class_listclass_list : class_list class\n                        | classclass : CLASS IDENTIFIER COLON IDENTIFIER LBRACE method_list RBRACEmethod_list : method_list method\n                        | methodmethod : IDENTIFIER block\n                    | method_name blockmethod_name : IDENTIFIER COLON\n                        | method_name IDENTIFIER COLONparam_list : param_list COLON IDENTIFIER\n                        | COLON IDENTIFIER\n                        | emptyblock : LBRACKET block_params PIPE statement_list RBRACKETblock_params : param_list\n                        | emptystatement_list : statement_list statement\n                            | statement\n                            | emptystatement : assignmentassignment : IDENTIFIER ASSIGN expression DOTexpression : primary\n                    | instructioninstruction : primary IDENTIFIER COLON primary    \n                    | instruction IDENTIFIER COLON primary \n                    | primary IDENTIFIER\n                    | instruction IDENTIFIER COLON paren_expression\n                    | primary IDENTIFIER COLON paren_expression\n                    | paren_expression IDENTIFIER COLON primary\n                    | paren_expression IDENTIFIER \n                    | paren_expressionprimary : INTEGER\n                    | IDENTIFIER\n                    | TRUE\n                    | FALSE\n                    | STRING\n                    | NIL\n                    | block\n                    | concatenated_stringconcatenated_string : STRING STRING\n                            | concatenated_string STRINGparen_expression : LPAREN expression RPARENempty :'
    
_lr_action_items = {'CLASS':([0,2,3,5,17,],[4,4,-3,-2,-4,]),'$end':([1,2,3,5,17,],[0,-1,-3,-2,-4,]),'IDENTIFIER':([4,7,9,11,12,13,14,15,18,19,24,25,26,27,29,30,31,32,35,36,37,38,40,41,42,43,44,45,46,47,48,49,50,51,52,54,55,56,58,59,60,61,62,63,64,65,66,],[6,8,10,10,-6,20,-7,-9,-5,-8,28,-10,33,34,33,-18,-19,-20,-14,-17,38,-33,52,53,-32,-34,-35,-36,-37,-38,-39,56,38,-21,-26,-40,-41,-30,38,38,38,-42,-24,-28,-25,-27,-29,]),'COLON':([6,10,16,20,22,23,28,34,52,53,56,],[7,15,24,25,27,-13,-12,-11,58,59,60,]),'LBRACE':([8,],[9,]),'LBRACKET':([10,13,15,25,37,50,58,59,60,],[16,16,-9,-10,16,16,16,16,16,]),'RBRACE':([11,12,14,18,19,35,],[17,-6,-7,-5,-8,-14,]),'PIPE':([16,21,22,23,28,34,],[-43,26,-15,-13,-12,-11,]),'RBRACKET':([26,29,30,31,32,36,51,],[-43,35,-18,-19,-20,-17,-21,]),'ASSIGN':([33,],[37,]),'DOT':([35,38,39,40,41,42,43,44,45,46,47,48,49,52,54,55,56,61,62,63,64,65,66,],[-14,-33,51,-22,-23,-32,-34,-35,-36,-37,-38,-39,-31,-26,-40,-41,-30,-42,-24,-28,-25,-27,-29,]),'RPAREN':([35,38,40,41,42,43,44,45,46,47,48,49,52,54,55,56,57,61,62,63,64,65,66,],[-14,-33,-22,-23,-32,-34,-35,-36,-37,-38,-39,-31,-26,-40,-41,-30,61,-42,-24,-28,-25,-27,-29,]),'INTEGER':([37,50,58,59,60,],[42,42,42,42,42,]),'TRUE':([37,50,58,59,60,],[43,43,43,43,43,]),'FALSE':([37,50,58,59,60,],[44,44,44,44,44,]),'STRING':([37,45,48,50,54,55,58,59,60,],[45,54,55,45,-40,-41,45,45,45,]),'NIL':([37,50,58,59,60,],[46,46,46,46,46,]),'LPAREN':([37,50,58,59,],[50,50,50,50,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'class_list':([0,],[2,]),'class':([0,2,],[3,5,]),'method_list':([9,],[11,]),'method':([9,11,],[12,18,]),'method_name':([9,11,],[13,13,]),'block':([10,13,37,50,58,59,60,],[14,19,47,47,47,47,47,]),'block_params':([16,],[21,]),'param_list':([16,],[22,]),'empty':([16,26,],[23,31,]),'statement_list':([26,],[29,]),'statement':([26,29,],[30,36,]),'assignment':([26,29,],[32,32,]),'expression':([37,50,],[39,57,]),'primary':([37,50,58,59,60,],[40,40,62,64,66,]),'instruction':([37,50,],[41,41,]),'concatenated_string':([37,50,58,59,60,],[48,48,48,48,48,]),'paren_expression':([37,50,58,59,],[49,49,63,65,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> class_list','program',1,'p_program','parser.py',22),
  ('class_list -> class_list class','class_list',2,'p_class_list','parser.py',26),
  ('class_list -> class','class_list',1,'p_class_list','parser.py',27),
  ('class -> CLASS IDENTIFIER COLON IDENTIFIER LBRACE method_list RBRACE','class',7,'p_class','parser.py',34),
  ('method_list -> method_list method','method_list',2,'p_method_list','parser.py',38),
  ('method_list -> method','method_list',1,'p_method_list','parser.py',39),
  ('method -> IDENTIFIER block','method',2,'p_method','parser.py',46),
  ('method -> method_name block','method',2,'p_method','parser.py',47),
  ('method_name -> IDENTIFIER COLON','method_name',2,'p_method_name','parser.py',51),
  ('method_name -> method_name IDENTIFIER COLON','method_name',3,'p_method_name','parser.py',52),
  ('param_list -> param_list COLON IDENTIFIER','param_list',3,'p_param_list','parser.py',60),
  ('param_list -> COLON IDENTIFIER','param_list',2,'p_param_list','parser.py',61),
  ('param_list -> empty','param_list',1,'p_param_list','parser.py',62),
  ('block -> LBRACKET block_params PIPE statement_list RBRACKET','block',5,'p_block','parser.py',72),
  ('block_params -> param_list','block_params',1,'p_block_params','parser.py',81),
  ('block_params -> empty','block_params',1,'p_block_params','parser.py',82),
  ('statement_list -> statement_list statement','statement_list',2,'p_statement_list','parser.py',86),
  ('statement_list -> statement','statement_list',1,'p_statement_list','parser.py',87),
  ('statement_list -> empty','statement_list',1,'p_statement_list','parser.py',88),
  ('statement -> assignment','statement',1,'p_statement','parser.py',95),
  ('assignment -> IDENTIFIER ASSIGN expression DOT','assignment',4,'p_assignment','parser.py',99),
  ('expression -> primary','expression',1,'p_expression','parser.py',103),
  ('expression -> instruction','expression',1,'p_expression','parser.py',104),
  ('instruction -> primary IDENTIFIER COLON primary','instruction',4,'p_instruction','parser.py',108),
  ('instruction -> instruction IDENTIFIER COLON primary','instruction',4,'p_instruction','parser.py',109),
  ('instruction -> primary IDENTIFIER','instruction',2,'p_instruction','parser.py',110),
  ('instruction -> instruction IDENTIFIER COLON paren_expression','instruction',4,'p_instruction','parser.py',111),
  ('instruction -> primary IDENTIFIER COLON paren_expression','instruction',4,'p_instruction','parser.py',112),
  ('instruction -> paren_expression IDENTIFIER COLON primary','instruction',4,'p_instruction','parser.py',113),
  ('instruction -> paren_expression IDENTIFIER','instruction',2,'p_instruction','parser.py',114),
  ('instruction -> paren_expression','instruction',1,'p_instruction','parser.py',115),
  ('primary -> INTEGER','primary',1,'p_primary','parser.py',137),
  ('primary -> IDENTIFIER','primary',1,'p_primary','parser.py',138),
  ('primary -> TRUE','primary',1,'p_primary','parser.py',139),
  ('primary -> FALSE','primary',1,'p_primary','parser.py',140),
  ('primary -> STRING','primary',1,'p_primary','parser.py',141),
  ('primary -> NIL','primary',1,'p_primary','parser.py',142),
  ('primary -> block','primary',1,'p_primary','parser.py',143),
  ('primary -> concatenated_string','primary',1,'p_primary','parser.py',144),
  ('concatenated_string -> STRING STRING','concatenated_string',2,'p_concatenated_string','parser.py',165),
  ('concatenated_string -> concatenated_string STRING','concatenated_string',2,'p_concatenated_string','parser.py',166),
  ('paren_expression -> LPAREN expression RPAREN','paren_expression',3,'p_paren_expression','parser.py',174),
  ('empty -> <empty>','empty',0,'p_empty','parser.py',178),
]
